Naive Approach 
======================================================================================


#include <bits/stdc++.h> 
using namespace std; 

void patSearchinng(string &txt,string &pat){
    int m=pat.length();
    int n=txt.length();
    for(int i=0;i<=(n-m);  ){
        int j;
        for(j=0;j<m;j++)
        if(pat[j]!=txt[i+j])
        break;
        
        if(j==m)
        cout<<i<<" ";
        if(j==0){
        i++;}
        else{
        i=(i+j);}
    }
}
 
int main() 
{ 
    string txt = "ABCABCD";string pat="ABCD";
    cout<<"All index numbers where pattern found:"<<" ";
    patSearchinng(txt,pat);
    
    return 0; 
} 















==========================================================================================
Better Solution
==========================================================================================
#include <bits/stdc++.h> 
using namespace std;
void patMatching(string &str, string &ptr)
{
int n=str.length();
int m=ptr.length();
for(int i=0;i<=(n-m);)
{
    int j;
    for(j=0;j<m;j++)
        if(ptr[j]!=str[i+j])
        break;
    if(j==m)
       cout<<i<<" ";
    if(j==0)
    {
     i++;
    }
    else
    {
     i+=j;
    }
    
}
}
int main()
{
    string str="abcabcd";
    string ptr="abcd";
    patMatching(str,ptr);
    return 0;
}
